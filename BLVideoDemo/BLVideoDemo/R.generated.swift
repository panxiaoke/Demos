//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `kongfu.mp4`.
    static let kongfuMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "kongfu", pathExtension: "mp4")
    /// Resource file `you.mp4`.
    static let youMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "you", pathExtension: "mp4")
    
    /// `bundle.url(forResource: "kongfu", withExtension: "mp4")`
    static func kongfuMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kongfuMp4
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "you", withExtension: "mp4")`
    static func youMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.youMp4
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `camera_change_lighted`.
    static let camera_change_lighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera_change_lighted")
    /// Image `camera_change_nor`.
    static let camera_change_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera_change_nor")
    /// Image `capture_result_giveup`.
    static let capture_result_giveup = Rswift.ImageResource(bundle: R.hostingBundle, name: "capture_result_giveup")
    /// Image `capture_result_use`.
    static let capture_result_use = Rswift.ImageResource(bundle: R.hostingBundle, name: "capture_result_use")
    /// Image `chat_capture_dimiss`.
    static let chat_capture_dimiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_capture_dimiss")
    /// Image `chat_player_centerplay`.
    static let chat_player_centerplay = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_player_centerplay")
    /// Image `chat_player_close`.
    static let chat_player_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_player_close")
    /// Image `chat_player_dot`.
    static let chat_player_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_player_dot")
    /// Image `chat_player_pause`.
    static let chat_player_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_player_pause")
    /// Image `chat_player_play`.
    static let chat_player_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_player_play")
    
    /// `UIImage(named: "camera_change_lighted", bundle: ..., traitCollection: ...)`
    static func camera_change_lighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera_change_lighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera_change_nor", bundle: ..., traitCollection: ...)`
    static func camera_change_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera_change_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "capture_result_giveup", bundle: ..., traitCollection: ...)`
    static func capture_result_giveup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.capture_result_giveup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "capture_result_use", bundle: ..., traitCollection: ...)`
    static func capture_result_use(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.capture_result_use, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_capture_dimiss", bundle: ..., traitCollection: ...)`
    static func chat_capture_dimiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_capture_dimiss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_player_centerplay", bundle: ..., traitCollection: ...)`
    static func chat_player_centerplay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_player_centerplay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_player_close", bundle: ..., traitCollection: ...)`
    static func chat_player_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_player_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_player_dot", bundle: ..., traitCollection: ...)`
    static func chat_player_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_player_dot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_player_pause", bundle: ..., traitCollection: ...)`
    static func chat_player_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_player_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_player_play", bundle: ..., traitCollection: ...)`
    static func chat_player_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_player_play, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
